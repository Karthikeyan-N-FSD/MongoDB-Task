users
    {
  _id: ObjectId,
  name: String,
  email: String,
  batch: String,
  mentor_id: ObjectId, // Reference to Mentors collection
  codekata_problems_solved: Number,
  tasks_submitted: [ObjectId], // References to Tasks
  placement_status: Boolean,
  company_drives_attended: [ObjectId] // References to Company_Drives
}

codekata
{
  _id: ObjectId,
  user_id: ObjectId, // Reference to Users collection
  problems_solved: Number,
  date: Date
}

attendance
{
  _id: ObjectId,
  user_id: ObjectId, // Reference to Users collection
  date: Date,
  status: String // "Present" or "Absent"
}

topics
{
  _id: ObjectId,
  date: Date,
  topic_name: String,
  tasks: [ObjectId] // References to Tasks collection
}

tasks
{
  _id: ObjectId,
  task_name: String,
  topic_id: ObjectId, // Reference to Topics collection
  user_id: ObjectId, // Reference to Users collection
  submitted_date: Date,
  due_date: Date
}

TaskSubmissions
{
  _id: ObjectId,
  task_id: ObjectId, // Reference to Tasks collection
  user_id: ObjectId, // Reference to Users collection
  submittedDate: Date,
  status: Boolean // true or false
}

company_drives
{
  _id: ObjectId,
  company_name: String,
  date: Date,
  attended_by: [ObjectId] // References to Users collection
}

mentors
{
  _id: ObjectId,
  name: String,
  email: String,
  mentees: [ObjectId] // References to Users collection
}


1. Find all the topics and tasks which are thought in the month of October
db.topics.aggregate([
    {
    $lookup: {
      from: 'tasks',
      localField: '_id',
      foreignField: 'topic_id',
      as: 'task_details'
    }
  },
  {
    $match: {
      date: {
        $gte: ISODate('2020-10-01'),
        $lte: ISODate('2020-10-31')
      }
    }
  },
  {
    $project: {
      topic_name: 1,
      date: 1,
      'task_details.task_name': 1,
      'task_details.due_date': 1
    }
  }
]);

2. Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020
db.company_drives.find({
  date: {
    $gte: ISODate('2020-10-15'),
    $lte: ISODate('2020-10-31')
  }
},
{
  company_name: 1,
  date: 1
});

3. Find all the company drives and students who are appeared for the placement.
db.company_drives.aggregate([
  {
    $lookup: {
      from: 'users',
      localField: 'attended_by',
      foreignField: '_id',
      as: 'attendees'
    }
  },
  {
    $project: {
      company_name: 1,
      date: 1,
      'attendees.name': 1,
      'attendees.email': 1
    }
  }
]);

4. Find the number of problems solved by the user in codekata
db.codekata.aggregate([
  {
    $group: {
      _id: "$user_id",
      totalProblemsSolved: { $sum: "$problems_solved" }
    }
  }
]);

5. Find all the mentors with who has the mentee's count more than 15
db.mentors.aggregate([
  {
    $project: {
      name: 1,
      email: 1,
      menteeCount: { $size: "$mentees" }
    }
  },
  {
    $match: {
      menteeCount: { $gt: 15 }
    }
  }
]);

6. Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020
db.attendance.aggregate([
    {
        $match: {
            "date": {
                $gte: ISODate("2020-10-15"),
                $lte: ISODate("2020-10-31")
            },
            "status": "Absent"
        }
    },
    {
        $lookup: {
            from: "TaskSubmissions",
            localField: "user_id",
            foreignField: "user_id",
            as: "task_submissions"
        }
    },
    {
        $match: {
      $or: [
        { "task_submissions": { $size: 0 } }, 
        { "task_submissions.status": false }
      ]
    }
    },
    {
        $group: {
            _id: null,
            count: { $sum: 1 }
        }
    }
]);
